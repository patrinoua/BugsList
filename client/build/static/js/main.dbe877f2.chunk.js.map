{"version":3,"sources":["components/elements.js","components/ListItem.js","components/BugList.js","App.js","serviceWorker.js","index.js"],"names":["colors","AppContainer","styled","div","Heading","h1","TableContainer","Table","table","Tr","tr","Td","td","TdMiddle","TdRight","TextContainer","MessageContainer","Button","button","TrashIcon","ClearAllContainer","ClearAll","Regular","ListItem","item","resolveHandler","blockHandler","id","state","href","type","text","onClick","BugList","useState","items","setItems","newItems","itemIndex","findIndex","splice","length","map","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbe877f2.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst colors = {\n  backgroundColor: '#e1e6eb',\n  textGrey: '#afbdcb',\n  textBlack: '#354352',\n  textGreen: '#5eb77f',\n  highlightGrey: '#eff2f6',\n  boxShadow: ' rgba(0, 0, 0, 0.25)',\n}\n\nexport const AppContainer = styled.div`\n  width: 650px;\n  height: 757px;\n  background: ${colors.backgroundColor};\n`\nexport const Heading = styled.h1`\n  font-size: 34px;\n  color: ${colors.textBlack};\n  margin: 50px;\n`\nexport const TableContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\nexport const Table = styled.table`\n  width: 530px;\n  min-height: 58px;\n  border-radius: 5px;\n  paddidng: 3px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  box-sizing: border-box;\n  box-shadow: 0 1px 3px ${colors.boxShadow};\n  background: white;\n  border-spacing: 0;\n`\nexport const Tr = styled.tr`\n  background: white;\n  padding: 10px 20px;\n  height: 58px;\n  display: flex;\n  align-items: center;\n\n  &:nth-child(even) {\n    background: ${colors.highlightGrey};\n  }\n`\nexport const Td = styled.td`\n  font-size: 15px;\n  width: 25%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  padding: 0 5px;\n`\nexport const TdMiddle = styled(Td)`\n  width: 50%;\n`\nexport const TdRight = styled(Td)`\n  width: 25%;\n  align-items: center;\n`\nexport const TextContainer = styled.div`\n  font-weight: 500;\n  color: ${colors.textBlack};\n`\nexport const MessageContainer = styled(TextContainer)`\n  white-space: nowrap;\n  width: 100%;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\nexport const Button = styled.button`\n  width: 80px;\n  margin: 2px;\n`\nexport const Icon = styled.div`\n  width: 20px;\n  height: 20px;\n  background-size: contain;\n  background-position: center center;\n  background-repeat: no-repeat;\n  &:hover {\n    cursor: pointer;\n  }\n`\nexport const TrashIcon = styled.div`\n  background-image: url('./trash.svg');\n  width: 13px;\n  height: 13px;\n  margin-right: 10px;\n`\nexport const ClearAllContainer = styled.div`\n  height: 150px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${colors.textGrey};\n  font-weight: 700;\n  text-transform: uppercase;\n`\nexport const ClearAll = styled.div`\n  width: 100px;\n  height: 30px;\n  align-items: center;\n  display: flex;\n`\nexport const Regular = styled.div`\n  font-size: 14px;\n`\n","import React from 'react'\nimport {\n  Tr,\n  Td,\n  TdMiddle,\n  TdRight,\n  TextContainer,\n  MessageContainer,\n  Button,\n} from './elements'\n\nconst ListItem = ({ item, resolveHandler, blockHandler }) => (\n  <Tr>\n    <Td>\n      <TextContainer>Id: {item.id}</TextContainer>\n      <TextContainer>State: {item.state ? 'Resolved' : 'Open'}</TextContainer>\n      <a href=\"\">Details</a>\n    </Td>\n    <TdMiddle>\n      <TextContainer>Type: {item.type}</TextContainer>\n      <MessageContainer>Message: {item.text}</MessageContainer>\n    </TdMiddle>\n    <TdRight>\n      <Button onClick={() => blockHandler(item.id)}>Block</Button>\n      <Button onClick={() => resolveHandler(item.id)}>Resolve</Button>\n    </TdRight>\n  </Tr>\n)\n\nexport default ListItem\n","import React, { useState } from 'react'\nimport {\n  AppContainer,\n  Heading,\n  TableContainer,\n  Table,\n  ClearAllContainer,\n  ClearAll,\n  Regular,\n  TrashIcon,\n} from './elements'\nimport ListItem from './ListItem'\n\nconst BugList = () => {\n  const [items, setItems] = useState([\n    { id: 1, state: false, type: 'Spam', text: 'Get up early' },\n    { id: 2, state: false, type: 'Spam', text: 'Do some meditation' },\n    { id: 3, state: false, type: 'Spam', text: 'Eat a healthy breakfast' },\n    { id: 4, state: false, type: 'Spam', text: 'Drink plenty of water' },\n  ])\n\n  const blockHandler = (id) => {\n    //api call to block {...}\n\n    //front end part:\n    const newItems = [...items]\n    const itemIndex = newItems.findIndex((item) => item.id === id)\n    newItems.splice(itemIndex, 1)\n    setItems(newItems)\n  }\n\n  const resolveHandler = (id) => {\n    //api call to resolve {...}\n\n    //front end part:\n    const newItems = [...items]\n    const itemIndex = newItems.findIndex((item) => item.id === id)\n    newItems[itemIndex].state = !newItems[itemIndex].state\n    setItems(newItems)\n  }\n\n  const trashAllHandler = () => setItems([])\n\n  return (\n    <AppContainer>\n      <Heading>Reports</Heading>\n      <TableContainer>\n        {items.length === 0 ? (\n          <Regular>No bugs!</Regular>\n        ) : (\n          <Table>\n            <tbody>\n              {items.map((item) => (\n                <ListItem\n                  key={item.id}\n                  item={item}\n                  resolveHandler={resolveHandler}\n                  blockHandler={blockHandler}\n                />\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </TableContainer>\n      {items.length ? (\n        <ClearAllContainer>\n          <ClearAll onClick={trashAllHandler}>\n            <TrashIcon />\n            Clear all\n          </ClearAll>\n        </ClearAllContainer>\n      ) : (\n        ''\n      )}\n    </AppContainer>\n  )\n}\n\nexport default BugList\n","import React from 'react'\nimport './App.css'\n\nimport BugList from './components/BugList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BugList />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}